# this is the boilerplate crd def that controller-gen reads and modifies with the
# contents from share_type.go
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: sharedresources.storage.openshift.io
  annotations:
    displayName: SharedResource
    description: Extension for sharing ConfigMaps and Secrets across Namespaces
spec:
  scope: Cluster
  group: storage.openshift.io
  names:
    plural: sharedresources
    singular: sharedresource
    kind: SharedResource
    listKind: SharedResourceList
  versions:
    - name: v1alpha1
      served: true
      storage: true
      "schema":
        "openAPIV3Schema":
          description: "SharedResource allows a backing Secret or ConfigMap to be shared across namespaces. Pods can mount the shared Secret or ConfigMap by adding a CSI volume to the pod specification using the \"sharedresource.storage.openshift.io\" CSI driver and a reference to the SharedResource in the volume attributes: \n spec:  volumes:  - name: shared-secret    csi:      driver: sharedresource.storage.openshift.io      volumeAttributes:        sharedResource: my-share \n For the mount to be successful, the pod's service account must be granted permission to 'use' the named SharedResource object within its namespace with an appropriate Role and RoleBinding.  For compactness, here are example `oc` invocations for creating such Role and RoleBinding objects. \n  `oc create role shared-resource-my-share --verb=use --resource=sharedresources.storage.openshift.io --resource-name=my-share`  `oc create rolebinding shared-resource-my-share --role=shared-resource-my-share --serviceaccount=my-namespace:default` \n Administrators can create separate Roles and RoleBindings for their users to be able the list and/or view the available cluster scoped `SharedResources` objects. \n Compatibility level 4: No compatibility is provided, the API can change at any point for any reason. These capabilities should not be used by applications needing long term support. These capabilities should not be used by applications needing long term support."
          type: object
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: Specification of the desired shared resource
              type: object
              required:
                - resource
              properties:
                description:
                  description: description is a user readable explanation of what the backing resource provides.
                  type: string
                resource:
                  description: resource references the backing object for this shared resource.
                  type: object
                  required:
                    - type
                  properties:
                    configMap:
                      description: configMap provides details about the backing object if it is a ConfigMap. If set, type must be "ConfigMap".
                      type: object
                      required:
                        - name
                        - namespace
                      properties:
                        name:
                          description: name represents the name of the ConfigMap that is being referenced.
                          type: string
                        namespace:
                          description: namespace represents the namespace where the referenced ConfigMap is located.
                          type: string
                    secret:
                      description: secret provides details about the backing object if it is a Secret. If set, type must be "Secret".
                      type: object
                      required:
                        - name
                        - namespace
                      properties:
                        name:
                          description: name represents the name of the Secret that is being referenced.
                          type: string
                        namespace:
                          description: namespace represents the namespace where the referenced Secret is located.
                          type: string
                    type:
                      description: 'type is the SharedResourceType for the shared resource. Valid types are: ConfigMap, Secret.'
                      type: string
                      enum:
                        - ConfigMap
                        - Secret
            status:
              description: Observed status of the shared resource
              type: object
              properties:
                conditions:
                  description: conditions represents any observations made on this particular shared resource by the underlying CSI driver or Share controller.
                  type: array
                  items:
                    description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }"
                    type: object
                    required:
                      - lastTransitionTime
                      - message
                      - reason
                      - status
                      - type
                    properties:
                      lastTransitionTime:
                        description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                        type: string
                        format: date-time
                      message:
                        description: message is a human readable message indicating details about the transition. This may be an empty string.
                        type: string
                        maxLength: 32768
                      observedGeneration:
                        description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                        type: integer
                        format: int64
                        minimum: 0
                      reason:
                        description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                        type: string
                        maxLength: 1024
                        minLength: 1
                        pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      status:
                        description: status of the condition, one of True, False, Unknown.
                        type: string
                        enum:
                          - "True"
                          - "False"
                          - Unknown
                      type:
                        description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                        type: string
                        maxLength: 316
                        pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
